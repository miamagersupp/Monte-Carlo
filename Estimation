import components.random.Random;
import components.random.Random1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Monte Carlo Estimate: compute percentage of pseudo-random points in [0.0,1.0)
 * interval that fall in the left half subinterval [0.0,0.5).
 *
 * author Mia Magersupp
 */

public final class MonteCarlo {

    private static boolean pointIsInCircle(double xCoord, double yCoord) {
        boolean check = false;
        if (Math.pow(xCoord - 1, 2.0) + Math.pow(yCoord - 1, 2.0) <= 1) {
            check = true;
        }
        return check;
    }

    private static int numberOfPointsInCircle(int n) {
        Random rnd = new Random1L();
        int points = 0;
        for (int i = 0; i < n; i++) {
            double x = rnd.nextDouble() * 2;
            double y = rnd.nextDouble() * 2;
            boolean check = pointIsInCircle(x, y);
            if (check == true) {
                points++;
            }
        }
        return points;
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {

        SimpleReader input = new SimpleReader1L();
        SimpleWriter output = new SimpleWriter1L();

        output.print("Number of points: ");
        int n = input.nextInteger();

        int pointsInCircle = numberOfPointsInCircle(n);

        double estimate = (100.0 * pointsInCircle) / n;
        output.println("Estimate of percentage: " + estimate + "%");

        double area = ((double) pointsInCircle / n) * 4;
        output.print(area);

        input.close();
        output.close();
    }

}
